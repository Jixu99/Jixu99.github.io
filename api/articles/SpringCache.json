{"title":"SpringCache 缓存框架","uid":"2f1c2f6b141897e462fbdbeadf23c65d","slug":"SpringCache","date":"2023-02-06T11:27:01.031Z","updated":"2023-02-06T14:24:15.802Z","comments":true,"path":"api/articles/SpringCache.json","keywords":null,"cover":"/img/SpringCache.jpg","content":"<h1 id=\"SpringCache-缓存框架\"><a href=\"#SpringCache-缓存框架\" class=\"headerlink\" title=\"SpringCache 缓存框架\"></a>SpringCache 缓存框架</h1><p><strong>缓存操作的实现，用于提升数据库的访问性能 。但是对于业务来说就可能处理多个缓存。对此提供了SpringCache</strong></p>\n<p><strong>现在业务层提供了缓存的处理支持，所以在数据层不需要进行缓存处理了</strong></p>\n<p><strong>具体就是通过CacheManager接口来同意不同的缓存技术</strong></p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<ul>\n<li>注：缓存对象需要实现Serializable接口 序列化才能缓存</li>\n</ul>\n\n</div>\n<h2 id=\"使用Redis\"><a href=\"#使用Redis\" class=\"headerlink\" title=\"使用Redis\"></a>使用Redis</h2><ul>\n<li><p><strong>导入Maven坐标</strong></p>\n<ul>\n<li>spring-boot-start-data-redis ，spring-boot-start-cache</li>\n</ul>\n</li>\n<li><p><strong>配置缓存设置 配置application.yml</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span> </span><br><span class=\"line\"> <span class=\"attr\">cache:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">   <span class=\"attr\">trime-to-live:</span> <span class=\"number\">1800000</span>  <span class=\"comment\">#设置缓存有效期</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"常用注解\"><a href=\"#常用注解\" class=\"headerlink\" title=\"常用注解\"></a>常用注解</h2><ul>\n<li><p><strong>@EnableCaching  启动类上，表示开启缓存注解功能</strong></p>\n</li>\n<li><p><strong>@Cacheable  在方法执行前spring先查看缓存数据，有则返回，没有会将方法的返回值放到缓存中。 一般用于查询</strong></p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Cacheable(value = &quot;userCache&quot;, key = &quot;#id&quot;, condition = &quot;result != null&quot;)</span>  <span class=\"comment\">//Spel表达式，动态设置key</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> User <span class=\"title function_\">getById</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">    userService.getById(id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user;</span><br></pre></td></tr></table></figure>\n\n<div class=\"custom-quote danger\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M19.76 5.23C15.84 5.23 12 2 12 2C12 2 8.15996 5.23 4.23996 5.23C4.23996 5.23 1.86996 16.99 12 22C22.13 16.99 19.76 5.23 19.76 5.23Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 16H12\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">特别注意</p>\n<p><ul>\n<li><p>注意若返回对象为null 依然会进行缓存。需要加condition &#x3D; “result !&#x3D; null” 来限制缓存的条件</p>\n</div>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Cacheable(value = &quot;userCache&quot;,key=&quot;#user.id + &#x27;_&#x27; + #user.name&quot;,condition = &quot;result != null&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">list</span><span class=\"params\">(User user)</span>&#123;</span><br><span class=\"line\">\tLambdaQueryWrapper&lt;User&gt; wrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">LamdbaQueryWrapper</span>&lt;&gt;();</span><br><span class=\"line\">\t\twrapper.eq(user.getId() != <span class=\"literal\">null</span>,User::getId,user.getId());</span><br><span class=\"line\">\t\twrapper.eq(user.getName() != <span class=\"literal\">null</span>,User::getName,user.getName());</span><br><span class=\"line\">\t\tList&lt;User&gt; userList = userService.list(wrapper);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> userList;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n<li><p><strong>@CachePut 将方法的返回值放到缓存中</strong></p>\n<ul>\n<li>一般用于插入数据@CachePut（Value &#x3D; “A”,key &#x3D;”B”）A 表示一类缓存，key表示当前类的缓存的key</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@CachePut(value = &quot;userCache&quot;,key=&quot;#user.id&quot;)</span>  <span class=\"comment\">//动态获取新增对象id属性`</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> User <span class=\"title function_\">save</span><span class=\"params\">(User user)</span>&#123;</span><br><span class=\"line\">\tuserService.save(user);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><strong>@CacheEvict 将一条或多条数据从缓存中删除</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@CacheEvict(value = &quot;userCache&quot;,key=&quot;#id&quot;)</span>  <span class=\"comment\">//清除userCache分类下key = id的缓存</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">(<span class=\"type\">long</span> id)</span>&#123;</span><br><span class=\"line\">     userService.removeById(id);</span><br><span class=\"line\"> \t\t<span class=\"keyword\">return</span> user;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"meta\">@CacheEvict(value = &quot;userCache&quot;,allEntries = true)</span>  <span class=\"comment\">// 表示删除当前分类下的所有缓存数据</span></span><br></pre></td></tr></table></figure>\n\n","feature":false,"text":"缓存操作的实现，用于提升数据库的访问性能 。但是对于业务来说就可能处理多个缓存。对此提供了SpringCache","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Spring笔记","slug":"Spring笔记","count":3,"path":"api/tags/Spring笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SpringCache-%E7%BC%93%E5%AD%98%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">SpringCache 缓存框架</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8Redis\"><span class=\"toc-text\">使用Redis</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">常用注解</span></a></li></ol></li></ol>","author":{"name":"寄许","slug":"blog-author","avatar":"/img/20210313122054101.png","link":"/","description":"风来听风,雨来看雨","socials":{"github":"https://jixu99.github.io/","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/322601346"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/send-permission"}}}},"mapped":true,"prev_post":{"title":"Spring框架核心知识点","uid":"795f915a16128efa588065568418f9f0","slug":"Spring","date":"2023-02-06T12:58:21.573Z","updated":"2023-02-06T14:24:08.990Z","comments":true,"path":"api/articles/Spring.json","keywords":null,"cover":"/img/Spring.png","text":"Spring是一个分层的全栈轻量级开源框架，核心是IOC和AOP，还能整合众多的第三方开源框架和类库。","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Spring笔记","slug":"Spring笔记","count":3,"path":"api/tags/Spring笔记.json"}],"author":{"name":"寄许","slug":"blog-author","avatar":"/img/20210313122054101.png","link":"/","description":"风来听风,雨来看雨","socials":{"github":"https://jixu99.github.io/","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/322601346"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/send-permission"}}}},"feature":true},"next_post":{"title":"小葡萄点餐（瑞吉）","uid":"33b31a83413931658e5fbe1a200a4967","slug":"Little-Grape","date":"2023-02-05T08:39:28.566Z","updated":"2023-02-06T14:24:15.092Z","comments":true,"path":"api/articles/Little-Grape.json","keywords":null,"cover":"/img/Little-Grape/little-grape.jpg","text":"基于SpringBoot + Vue + Mybatis-Plus + Redis + Mysql 等技术栈实现的外卖点餐系统。","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"项目","slug":"项目","count":2,"path":"api/tags/项目.json"}],"author":{"name":"寄许","slug":"blog-author","avatar":"/img/20210313122054101.png","link":"/","description":"风来听风,雨来看雨","socials":{"github":"https://jixu99.github.io/","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/322601346"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/send-permission"}}}},"feature":false}}