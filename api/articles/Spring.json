{"title":"Spring框架核心知识点","uid":"795f915a16128efa588065568418f9f0","slug":"Spring","date":"2023-02-06T12:58:21.573Z","updated":"2023-02-06T14:09:24.701Z","comments":true,"path":"api/articles/Spring.json","keywords":null,"cover":"/img/spring.png","content":"<h1 id=\"Spring框架核心知识点\"><a href=\"#Spring框架核心知识点\" class=\"headerlink\" title=\"Spring框架核心知识点\"></a>Spring框架核心知识点</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Spring是一个分层的全栈轻量级开源框架，核心是<code>IOC</code>和<code>AOP</code>，还能整合众多的第三方开源框架和类库。</p>\n<h2 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h2><ul>\n<li>方便解耦，简化开发</li>\n<li>AOP编程的支持</li>\n<li>声明式事务的支持</li>\n<li>方便程序的测试</li>\n<li>方便集成各种优秀框架</li>\n<li>降低JavaEE API的使用难度</li>\n<li>源码是经典的JAVA学习范例</li>\n</ul>\n<h2 id=\"核心结构\"><a href=\"#核心结构\" class=\"headerlink\" title=\"核心结构\"></a>核心结构</h2><ul>\n<li><p><strong>数据处理模块</strong></p>\n<ul>\n<li>Spring AOP为数据访问提供了事务管理服务，同时还集成了其他<code>ORM</code>框架</li>\n</ul>\n</li>\n<li><p><strong>WEB模块</strong></p>\n<ul>\n<li>该模块提供了SpringMVC框架给WEB应用，WEB层提升了应用的松耦合水平</li>\n</ul>\n</li>\n<li><p><strong>AOP模块 （面向切面编程）</strong></p>\n<ul>\n<li>Spring应用系统中开发切面的基础，与DI （依赖注入）一样，AOP可以帮助应用对象解耦。</li>\n</ul>\n</li>\n<li><p><strong>核心容器Core Container模块</strong></p>\n<ul>\n<li>管理着Spring应用中bean的创建、配置和管理</li>\n<li>SpringBean工厂 ，实现了Spring 的DI功能</li>\n<li>所有的模块都建立在此之上</li>\n</ul>\n</li>\n<li><p><strong>Test模块</strong></p>\n<ul>\n<li>方便进行测试，Spring提供了测试模块来进行Spring应用的测试。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"核心\"><a href=\"#核心\" class=\"headerlink\" title=\"核心\"></a>核心</h2><p><strong>IOC（控制反转） 和 AOP （面向切面编程）</strong></p>\n<ul>\n<li><p>IOC</p>\n<ul>\n<li><p>IOC 技术思想 ，是将原本需要new对象的操作交给IOC容器去完成 ，包括创建实例化对象并管理它，我们需要使用哪个对象，去<code>IOC</code>容器获取即可。反转指对象的创建者反转给IOC容器 </p>\n</li>\n<li><p>主要解决了对象之间耦合度的问题</p>\n</li>\n<li><p>IOC 和 DI 的区别</p>\n<p>IOC是站在对象的角度，对象实例化及其管理的权力交给了容器，DI是站在容器的角度，容器会把对象依赖的属性注入。</p>\n</li>\n</ul>\n</li>\n<li><p>AOP</p>\n<ul>\n<li>AOP提出横向抽取机制，将横切逻辑代码和业务逻辑代码分离 。减少代码冗余，解耦合</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Spring-IOC应用\"><a href=\"#Spring-IOC应用\" class=\"headerlink\" title=\"Spring IOC应用\"></a>Spring IOC应用</h2><ul>\n<li><p><strong>基础</strong></p>\n<ul>\n<li>bean.xml : 定义需要实例化的类 及各个类之间的依赖关系</li>\n<li>BeanFactory : IOC容器，通过反射达到以上目的</li>\n</ul>\n</li>\n<li><p><strong>BeanFactory和ApplicationContext的区别</strong></p>\n<ul>\n<li>BeanFactory是Spring框架IOC容器的顶层接口，用于定义一些基础功能和规范，</li>\n<li>ApplicationContext是它的一个子接口。通常我们称BeanFactory是Spring IOC的基础容器，ApplicationContext是容器的高级接口，比BeanFactory拥有更多功能</li>\n</ul>\n</li>\n<li><p><strong>bean标签的常用属性</strong></p>\n<ul>\n<li>id ：对象的唯一标识</li>\n<li>class : 类全名</li>\n<li>name : 类名称</li>\n<li>factory-bean属性：用于指定创建当前<code>bean</code>对象的⼯⼚⽅法，如配合factory-bean属性使⽤， 则class属性失效。如配合class属性使⽤，则⽅法必须是static的。</li>\n<li>scope：指定<code>bean</code>对象的作用范围，默认是&#96;ingleton</li>\n<li>init-method属性：指定bean对象的初始化方法，此方法会在bean对象装配后调用，该方法必须是一个无参方法</li>\n<li>destory-method属性：⽤于指定bean对象的销毁⽅法，此⽅法会在bean对象销毁前执⾏。它只 能为scope是singleton时起作⽤。</li>\n</ul>\n</li>\n<li><p><strong>常用注解</strong></p>\n<ul>\n<li>@Autowired ：根据指定类型注入</li>\n<li>@Qualifier : 告诉Spring容器具体去装配那个对象，可以结合@Autowired 唯一确定对象</li>\n<li>@Resource ： 默认按照ByName 自动注入</li>\n<li>@Configuration ：标明当前类为配置类</li>\n<li>@ComponemtScan ： </li>\n<li>@PropertySource ： 引入外部属性配置文件</li>\n<li>@Import ： 引入其他配置类</li>\n<li>@Value : 对变量进行赋值，可以直接赋值。也可以使用${}读取配置文件中的信息</li>\n<li>@Bean ： 将方法返回的对象加入SpringIOC容器中</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2>","feature":true,"text":"Spring是一个分层的全栈轻量级开源框架，核心是IOC和AOP，还能整合众多的第三方开源框架和类库。","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Spring笔记","slug":"Spring笔记","count":3,"path":"api/tags/Spring笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Spring%E6%A1%86%E6%9E%B6%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9\"><span class=\"toc-text\">Spring框架核心知识点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">优势</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">核心结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83\"><span class=\"toc-text\">核心</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Spring-IOC%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">Spring IOC应用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">代理模式</span></a></li></ol></li></ol>","author":{"name":"寄许","slug":"blog-author","avatar":"/img/20210313122054101.png","link":"/","description":"风来听风,雨来看雨","socials":{"github":"https://jixu99.github.io/","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/322601346"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/send-permission"}}}},"mapped":true,"prev_post":{"title":"SpringMVC","uid":"cd53cdbf97b8f99c953dd3eda45eed25","slug":"SpringMVC","date":"2023-02-06T14:05:09.728Z","updated":"2023-02-06T14:12:00.491Z","comments":true,"path":"api/articles/SpringMVC.json","keywords":null,"cover":"/img/SpringMVC.jpg","text":"SpringMVC也是一个容器，使用IoC核心技术，管理界面层中的控制器对象。SpringMVC的底层就是servlet其核心DispatcherServlet","link":"","photos":[],"count_time":{"symbolsCount":970,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Spring笔记","slug":"Spring笔记","count":3,"path":"api/tags/Spring笔记.json"}],"author":{"name":"寄许","slug":"blog-author","avatar":"/img/20210313122054101.png","link":"/","description":"风来听风,雨来看雨","socials":{"github":"https://jixu99.github.io/","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/322601346"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/send-permission"}}}},"feature":true},"next_post":{"title":"个人想法","uid":"f2b7062f0cb0d9043e818423b0c37216","slug":"personal","date":"2023-02-05T13:29:13.684Z","updated":"2023-02-06T12:58:41.291Z","comments":true,"path":"api/articles/personal.json","keywords":null,"cover":"/img/person.jpg","text":"嘻嘻哈哈","link":"","photos":[],"count_time":{"symbolsCount":131,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"个人","slug":"个人","count":1,"path":"api/tags/个人.json"}],"author":{"name":"寄许","slug":"blog-author","avatar":"/img/20210313122054101.png","link":"/","description":"风来听风,雨来看雨","socials":{"github":"https://jixu99.github.io/","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/322601346"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/send-permission"}}}},"feature":true}}